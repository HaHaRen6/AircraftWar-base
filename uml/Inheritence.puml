@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY,
        int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + getLocationX():int
    + getLocationY():int
    + setLocation(double locationX, double locationY):void
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}


abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int

    + AbstractAircraft(int locationX, int locationY,
        int speedX, int speedY, int hp)
    + increaseHp(int increase): void
    + decreaseHp(int decrease): void
    + getHp():int
    + {abstract} shoot(): List<BaseBullet>
}
AbstractFlyingObject <|-- AbstractAircraft


interface Enemy{
    + dropProp():List<AbstractProp>
}


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - {static} heroAircraft:HeroAircraft

    - HeroAircraft(int locationX, int locationY,
        int speedX, int speedY, int hp)
    + {static}getHeroAircraft():HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- HeroAircraft
HeroAircraft <-- HeroAircraft


class MobEnemy {

    + MobEnemy(int locationX, int locationY,
        int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + dropProp():List<Prop>
}
AbstractAircraft <|-- MobEnemy
Enemy <|.. MobEnemy


class BossEnemy {
    - shootNum:int
    - power:int
    - direction:int

    + BossEnemy(int locationX, int locationY,
        int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + dropProp():List<Prop>
}
AbstractAircraft <|-- BossEnemy
Enemy <|.. BossEnemy
BossEnemy --> PropFactory


class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int

    + EliteEnemy(int locationX, int locationY,
        int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + dropProp():List<Prop>
}
AbstractAircraft <|-- EliteEnemy
Enemy <|.. EliteEnemy
EliteEnemy --> PropFactory


abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY,
        int speedX, int speedY)
    + forward():void
    + {abstract} active(HeroAircraft heroAircraft):void
}
AbstractFlyingObject <|-- AbstractProp
AbstractProp ..> HeroAircraft


class BloodProp
{
    - hpIncrease:int

    + BloodProp(int locationX, int locationY,
        int speedX, int speedY)
    + active(HeroAircraft heroAircraft):void
}
AbstractProp <|-- BloodProp
BloodProp ..> HeroAircraft


class BombProp
{

    + BombProp(int locationX, int locationY,
        int speedX, int speedY)
    + active(HeroAircraft heroAircraft):void
}
AbstractProp <|-- BombProp
BombProp ..> HeroAircraft


class BulletProp
{

    + BulletProp(int locationX, int locationY,
        int speedX, int speedY)
    + active(HeroAircraft heroAircraft):void
}
AbstractProp <|-- BulletProp
BulletProp ..> HeroAircraft


abstract class BaseBullet
{
    - power:int

    + BaseBullet(int locationX, int locationY,
        int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}
AbstractFlyingObject <|-- BaseBullet


class HeroBullet {
    + HeroBullet(int locationX, int locationY,
        int speedX, int speedY, int power)
}
BaseBullet <|-- HeroBullet


class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
        int speedX, int speedY, int power)
}
BaseBullet <|-- EnemyBullet


interface PropFactory {
    + createProp(int x, int y, int speedY):AbstractProp
}


class BloodPropFactory {
    + createProp(int x, int y, int speedY):BloodProp
}
PropFactory <|.. BloodPropFactory
BloodProp <.. BloodPropFactory


class BombPropFactory {
    + createProp(int x, int y, int speedY):BombProp
}
PropFactory <|.. BombPropFactory
BombProp <.. BombPropFactory


class BulletPropFactory {
    + createProp(int x, int y, int speedY):BulletProp
}
PropFactory <|.. BulletPropFactory
BulletProp <.. BulletPropFactory


interface EnemyFactory {
    + createEnemy():AbstractAircraft
}


class EliteEnemyFactory {
    + createEnemy():EliteEnemy
}
EnemyFactory <|.. EliteEnemyFactory
EliteEnemy <.. EliteEnemyFactory


class BossEnemyFactory {
    + createEnemy():BossEnemy
}
EnemyFactory <|.. BossEnemyFactory
BossEnemy <.. BossEnemyFactory


class MobEnemyFactory {
    + createEnemy():MobEnemy
}
EnemyFactory <|.. MobEnemyFactory
MobEnemy <.. MobEnemyFactory

@enduml